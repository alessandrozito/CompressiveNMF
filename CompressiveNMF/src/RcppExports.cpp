// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// sample_weights_cpp
void sample_weights_cpp(arma::mat& shape_mat, arma::mat& rate_mat, arma::mat& Theta);
RcppExport SEXP _CompressiveNMF_sample_weights_cpp(SEXP shape_matSEXP, SEXP rate_matSEXP, SEXP ThetaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type shape_mat(shape_matSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type rate_mat(rate_matSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Theta(ThetaSEXP);
    sample_weights_cpp(shape_mat, rate_mat, Theta);
    return R_NilValue;
END_RCPP
}
// sample_signatures_cpp
void sample_signatures_cpp(arma::mat& Alpha, arma::mat& R);
RcppExport SEXP _CompressiveNMF_sample_signatures_cpp(SEXP AlphaSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Alpha(AlphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type R(RSEXP);
    sample_signatures_cpp(Alpha, R);
    return R_NilValue;
END_RCPP
}
// randmult
arma::vec randmult(double n, arma::vec& prob);
RcppExport SEXP _CompressiveNMF_randmult(SEXP nSEXP, SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(randmult(n, prob));
    return rcpp_result_gen;
END_RCPP
}
// sample_mu_ARD_cpp
void sample_mu_ARD_cpp(double a, double a0, double b0, arma::mat& Theta, arma::vec& mu);
RcppExport SEXP _CompressiveNMF_sample_mu_ARD_cpp(SEXP aSEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP ThetaSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    sample_mu_ARD_cpp(a, a0, b0, Theta, mu);
    return R_NilValue;
END_RCPP
}
// sample_Y_cpp
void sample_Y_cpp(arma::mat& X, arma::mat& nonzero_ids, arma::mat& R, arma::mat& Theta, arma::cube& Y);
RcppExport SEXP _CompressiveNMF_sample_Y_cpp(SEXP XSEXP, SEXP nonzero_idsSEXP, SEXP RSEXP, SEXP ThetaSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type nonzero_ids(nonzero_idsSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type Y(YSEXP);
    sample_Y_cpp(X, nonzero_ids, R, Theta, Y);
    return R_NilValue;
END_RCPP
}
// sample_Y_cpp2
arma::cube sample_Y_cpp2(arma::mat& X, arma::mat& nonzero_ids, arma::mat& R, arma::mat& Theta, arma::cube& Yt);
RcppExport SEXP _CompressiveNMF_sample_Y_cpp2(SEXP XSEXP, SEXP nonzero_idsSEXP, SEXP RSEXP, SEXP ThetaSEXP, SEXP YtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type nonzero_ids(nonzero_idsSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type Yt(YtSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_Y_cpp2(X, nonzero_ids, R, Theta, Yt));
    return rcpp_result_gen;
END_RCPP
}
// CompressiveNMF_cpp
List CompressiveNMF_cpp(arma::mat& X, arma::mat nonzero_ids, arma::mat R, arma::mat Theta, arma::cube Y, arma::vec mu, arma::mat SignaturePrior, int nsamples, int burnin, double a, double a0, double b0);
RcppExport SEXP _CompressiveNMF_CompressiveNMF_cpp(SEXP XSEXP, SEXP nonzero_idsSEXP, SEXP RSEXP, SEXP ThetaSEXP, SEXP YSEXP, SEXP muSEXP, SEXP SignaturePriorSEXP, SEXP nsamplesSEXP, SEXP burninSEXP, SEXP aSEXP, SEXP a0SEXP, SEXP b0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type nonzero_ids(nonzero_idsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type SignaturePrior(SignaturePriorSEXP);
    Rcpp::traits::input_parameter< int >::type nsamples(nsamplesSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type b0(b0SEXP);
    rcpp_result_gen = Rcpp::wrap(CompressiveNMF_cpp(X, nonzero_ids, R, Theta, Y, mu, SignaturePrior, nsamples, burnin, a, a0, b0));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CompressiveNMF_sample_weights_cpp", (DL_FUNC) &_CompressiveNMF_sample_weights_cpp, 3},
    {"_CompressiveNMF_sample_signatures_cpp", (DL_FUNC) &_CompressiveNMF_sample_signatures_cpp, 2},
    {"_CompressiveNMF_randmult", (DL_FUNC) &_CompressiveNMF_randmult, 2},
    {"_CompressiveNMF_sample_mu_ARD_cpp", (DL_FUNC) &_CompressiveNMF_sample_mu_ARD_cpp, 5},
    {"_CompressiveNMF_sample_Y_cpp", (DL_FUNC) &_CompressiveNMF_sample_Y_cpp, 5},
    {"_CompressiveNMF_sample_Y_cpp2", (DL_FUNC) &_CompressiveNMF_sample_Y_cpp2, 5},
    {"_CompressiveNMF_CompressiveNMF_cpp", (DL_FUNC) &_CompressiveNMF_CompressiveNMF_cpp, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_CompressiveNMF(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
